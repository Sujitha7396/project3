import tkinter as tk
import tkinter.ttk as ttk
from tkinter import messagebox
import datetime
import re

root = tk.Tk()
root.title("Expenses Manager")
root.geometry("400x500")  # Fixed window size
root.resizable(False, False)  # Disable resizing
file=open('expenses.csv','a+')
options = ["entertainment", "food", "transportaion"]

# Create frames with fixed size
home = tk.Frame(root, bg="lightblue", width=400, height=600)
check = tk.Frame(root, bg="lightgreen", width=400, height=600)
for frame in (home, check):
    frame.place(x=0, y=0, width=400, height=600)
class Expense:
    def show(self,d='',c=''):
        # Define Treeview columns
        columns = ("#1", "#2", "#3", "#4", "#5")
        tree = ttk.Treeview(check, columns=columns, show="headings")
        tree.heading("#1", text="ID")
        tree.heading("#2", text="Date")
        tree.heading("#3", text="Category")
        tree.heading("#4", text="Price")
        tree.heading("#5", text="Description")

        # Define column widths
        tree.column("#1", anchor=tk.CENTER, width=20)
        tree.column("#2", anchor=tk.W, width=60)
        tree.column("#3", anchor=tk.CENTER, width=80)
        tree.column("#4", anchor=tk.CENTER, width=40)
        tree.column("#5", anchor=tk.W, width=150)

        # Load and display data from the CSV file
        file.seek(0)  # Go to the start of the file
        total=0
        for idx, line in enumerate(file.readlines(), start=1):
            date,category, price, description = line.strip().split(',')
            if d and c:
                yy,mm=map(int,d.split('/'))
                y1,m1=map(int,date.split('-')[:2])
                if not  (yy==y1 and mm==m1 and c==category):
                    continue
            elif d:
                yy,mm=map(int,d.split('/'))
                y1,m1=map(int,date.split('-')[:2])
                if not  (yy==y1 and mm==m1):
                    continue
            elif c:
                if not  (c==category):
                    continue
            total+=int(price)
            tree.insert("", tk.END, values=(idx, date, category, price, description))

        # Add a vertical scrollbar to the Treeview
        scrollbar = ttk.Scrollbar(check, orient="vertical", command=tree.yview)
        tree.configure(yscroll=scrollbar.set)
        scrollbar.place(x=380, y=60, height=400)
        
        # Place the Treeview
        tree.place(x=0, y=60, width=380, height=400)
        tk.Label(check,text=f'Total Expenses:{total}').place(x=180,y=470)
        
        check.tkraise()  # Show the check frame

    def expenses(self):
        tk.Button(check, text='Home', command=self.home).place(x=5,y=5)
        tk.Label(check,text='Month (YYYY/MM) :').place(x=60,y=5)
        date=tk.Entry(check)
        date.place(x=180,y=5)
        tk.Label(check,text='category :').place(x=60,y=27)
        combobox = ttk.Combobox(check, values=options)
        combobox.place(x=180,y=27)
        tk.Button(check, text='Home', command=self.home).place(x=5,y=5)
        tk.Button(check, text='Show', command=lambda:self.show(date.get(),combobox.get())).place(x=350,y=17)
        self.show()
    def show_expenses(self):
        self.expenses()

    def show_message(self, message):
        """Show a temporary message on the home screen."""
        msg_label = tk.Label(home, text=message, bg="lightblue", fg="green")
        msg_label.place(x=100, y=300)
        
        # Remove the message after 2 seconds
        root.after(3000, lambda: (msg_label.destroy(), self.home()))

    def add_expense(self,c,p,d):
            if c and p and d:
                file.seek(0)
                file.write(f'{datetime.date.today()},{c},{p},{d}\n')
                file.flush()
                self.show_message('Expense Success Fully Added')
            else:
                self.show_message('Incomplete Data')
    def home(self):
        for i in home.winfo_children():
             i.destroy()
        tk.Label(home,text='Expences Manager',bg='lightblue').place(x=50,y=10)
        tk.Button(home,text='View Expenses',command=self.show_expenses).place(x=200,y=10)
        tk.Label(home,text='category :').place(x=100,y=100)
        combobox = ttk.Combobox(home, values=options)
        combobox.place(x=200,y=100)
        tk.Label(home,text='Price :').place(x=100,y=130)
        p=tk.Entry(home)
        p.place(x=200,y=130)
        tk.Label(home,text='Description :').place(x=100,y=160)
        des=tk.Entry(home)
        des.place(x=200,y=160,width=150,height=80)
        tk.Button(home,text='Add Expense',command=lambda:self.add_expense(combobox.get(),p.get(),des.get())).place(x=150,y=250)
        home.tkraise()
Expense().home()

root.mainloop()
